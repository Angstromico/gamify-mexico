---
// Import statements
import Section from './Section'
import LogoContainer from './LogoContainer'
import { bingo } from '@assets/index'
import PSpanMexico from './PSpanMexico'

// Interface for component props
interface Props {
  title: string
  description: string
  visionTitle: string
  vision: string
  missionTitle: string
  mission: string
  valuesTitle: string
  values: string
  largeText: string
  belowTitle: string
}

// Extract props from Astro context
const { title, description, visionTitle, vision, missionTitle, mission, valuesTitle, values, largeText, belowTitle } = Astro.props

// Function to split a string into an array based on line breaks
function splitTextToLines(text: string): string[] {
  return text.split(/\r?\n/).filter(line => line.trim() !== "");
}

// Split largeText into lines
const largeTextLines = splitTextToLines(largeText);
---

<div class="relative w-full h-[50vh] parallax-banner bg-cover bg-center" style={`background-image: url(${bingo.src});`}>
  <div class="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
    <h1 class="h1 text-n-1 text-shadow-lg">{title}</h1>
  </div>
</div>

<Section id='AboutUs' classes="container py-12 lg:py-20 text-center">
  <p class="body-1 text-n-2 max-w-3xl mx-auto">
    {description}
  </p>

  <div class="grid grid-cols-1 md:grid-cols-3 gap-8 mt-12">
    <div class="bg-n-12 p-8 rounded-lg shadow-lg">
      <h2 class="h2 text-color-2 mb-4">{visionTitle}</h2>
      <p class="body-2 text-n-3">
        {vision}
      </p>
    </div>
    <div class="bg-n-12 p-8 rounded-lg shadow-lg">
      <h2 class="h2 text-color-3 mb-4">{missionTitle}</h2>
      <p class="body-2 text-n-3">
        {mission}
      </p>
    </div>
    <div class="bg-n-12 p-8 rounded-lg shadow-lg">
      <h2 class="h2 text-color-4 mb-4">{valuesTitle}</h2>
      <p class="body-2 text-n-3">
        {values}
      </p>
    </div>
  </div>
</Section>

<!-- Logo and Text Section -->
<Section id="SectionText" classes="container py-16 lg:py-24 relative w-full overflow-hidden">
  <div class="flex flex-col-reverse md:flex-row gap-12 items-center justify-between">
    <div class="text-container w-full md:w-[65%] space-y-6">
      <h2 class="h2 text-n-1 mb-6 font-bold text-gradient">{belowTitle} <!-- Highlight a little big more this title --></h2>
      <div class="body-2 text-lg md:text-xl text-n-3 space-y-6 max-w-3xl">
        {largeTextLines.map(line => (
          <PSpanMexico line={line} />
        ))}
      </div>
    </div>

     <LogoContainer client:load />
  </div>
</Section>

<style is:global>
  .parallax-banner {
    background-attachment: fixed;
    background-size: cover;
    background-position: center;
  }

  .text-shadow-lg {
    text-shadow: 0px 4px 6px rgba(0, 0, 0, 0.6);
  }

  .logo-container {
    will-change: transform, opacity;
  }

  .show-logo {
    transform: translateX(0) !important;
    opacity: 1 !important;
  }

  .hide-logo {
    transform: translateX(100%) !important;
    opacity: 0 !important;
  }

  @media (max-width: 768px) {
    .logo-container {
      transform: translateY(100%);
    }

    .show-logo {
      transform: translateY(0) !important;
    }

    .hide-logo {
      transform: translateY(100%) !important;
    }
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .text-container p {
    animation: fadeInUp 0.6s ease-out forwards;
    opacity: 0;
  }

  .text-container p:nth-child(1) { animation-delay: 0.1s; }
  .text-container p:nth-child(2) { animation-delay: 0.2s; }
  .text-container p:nth-child(3) { animation-delay: 0.3s; }
  /* Add more if needed */

  .text-gradient {
  background: linear-gradient(90deg, #00843d, #ffffff, #ef3340);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}
</style>

<script>
  // Parallax effect
  const parallaxBanner = document.querySelector('.parallax-banner') as HTMLElement;

  function updateParallax() {
    const scrollPosition = window.pageYOffset;
    if (parallaxBanner) {
      parallaxBanner.style.backgroundPositionY = `${scrollPosition * 0.5}px`;
    }
  }

  window.addEventListener('scroll', () => {
    requestAnimationFrame(updateParallax);
  });

  // Text animation
  const textObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.style.animationPlayState = 'running';
      }
    });
  }, observerOptions);

  document.querySelectorAll('.text-container p').forEach(p => textObserver.observe(p));
</script>